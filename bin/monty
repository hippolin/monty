#!/usr/bin/env python

import getopt
import os
import subprocess
import sys
import time

import jinja2
import yaml


def main():

    opts, args = getopt.getopt(sys.argv[1:], '1')

    total = 0
    for opt, arg in opts:
        if opt == '-1':
            total = 1

    while not os.path.exists('.monty.yml') and os.getcwd() != '/':
        os.chdir('..')

    mtimes = {}
    count = 0
    config = None
    while True:

        if count:
            time.sleep(1)
        count += 1

        path = '.monty.yml'
        mtime = os.path.getmtime(path)

        if config is None or mtimes.get(path, 0.0) < mtime:
            with open(path) as f:
                config = yaml.load(jinja2.Template(f.read()).render())
            mtimes.clear()
            mtimes[path] = mtime

        tests = None
        for i, task in enumerate(config):
            if 'tests' in task:
                tests = task['tests']
            
        for i, task in enumerate(config):

            if not 'build' in task:
                continue

            path = os.path.join(task['build'], 'Dockerfile')


            dependent = []
            with open(path) as f:
                x = f.read()
            for line in x.splitlines():
                if line.strip():
                    if line.split()[0] in ('ADD', 'COPY'):
                        dependent.append(os.path.join(task['build'], line.split()[1]))

            uptodate = True
                        

            for p in [path] + dependent:
                mtime = os.path.getmtime(p)
                if mtimes.get(p, 0.0) < mtime:
                    uptodate = False
                    break


            if uptodate:
                continue
            
            for p in [path] + dependent:
                mtimes[p] = os.path.getmtime(p)


            if 'image' in task:
                cmd = "docker build -t %s %s" % (task['image'][0], task['build'])
                info(cmd)
                r = os.system(cmd)
                if r == 0:

                    if tests is not None:
                        for j, test in enumerate(tests):

                            if 'env' in test:
                                cmd = ["docker", "run", "--rm"] + ['--env=%s' % x for x in test['env']] + [task['image'][0], 'sh', '-c', test['cmd']]
                                info(test['cmd'], ' #', '; '.join(test['env']))
                            else:
                                cmd = ["docker", "run", "--rm", task['image'][0], 'sh', '-c', test['cmd']]
                                info(test['cmd'])

                            p = subprocess.Popen(cmd)
                            r = p.wait()

                            if r == 0:
                                print G("test passed")
                            else:
                                print R("test failed")
                                
                    for image in task['image'][1:]:
                        cmd = "docker tag -f %s %s" % (task['image'][0], image)
                        info(cmd)
                        os.system(cmd)
            else:
                cmd = "docker build %s" % task['build']
                info(cmd)
                os.system(cmd)

        if total != 0 and count >= total:
            break


def info(*args):
    print(u"\U0001F339  \x1b[1;39m%s\x1b[0m" % ' '.join([str(arg) for arg in args]))


def G(*args):
    return u"\x1b[1;32m%s\x1b[0m" % ' '.join([str(arg) for arg in args])


def R(*args):
    return u"\x1b[1;31m%s\x1b[0m" % ' '.join([str(arg) for arg in args])
   

if __name__ == '__main__':
    main()
